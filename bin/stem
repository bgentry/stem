#!/usr/bin/env ruby

require 'json'
require 'swirl'
require 'pp'

c = Swirl::EC2.new

CONFIG = ARGV[0] + "/config.json"
USERDATA = ARGV[0] + "/userdata.sh"

config = JSON.parse File.read CONFIG
throw "No config" unless config

avail_zone = config["availability_zone"] || "us-east-1c"

opt = {
  "Placement.AvailabilityZone" => avail_zone,
  "MinCount" => "1",
  "MaxCount" => "1",
  "KeyName" => "default",
  "ImageId" => config["ami32"]
}

if config["volumes"]
  ebs = config["volumes"].select {|v| v["media"] == "ebs"}
  # XXX: check that the ebs group is ok before starting to create volumes

  devices = []
  sizes = []
  ebs.each do |v|
    puts "Adding a volume of #{v["size"]} to be mounted at #{v["device"]}."
    devices << v["device"]
    sizes << v["size"].to_s
  end

  opt.merge! "BlockDeviceMapping.#.Ebs.VolumeSize" => sizes,
             "BlockDeviceMapping.#.DeviceName" => devices
end

if USERDATA && data = File.read(USERDATA)
  puts "Userdata provided."
  opt.merge!({ "UserData" => Base64.encode64(data)})
end

pp opt
pp c.call "RunInstances", opt

